{"version":3,"sources":["../src/index.ts","../src/FirebaseProvider.tsx","../src/hooks/seasonUpdateHooks.ts","../src/hooks/seasonFetchHooks.ts","../src/hooks/matchupFetchHooks.ts","../src/constants/messages.ts","../src/hooks/playerFetchHooks.ts","../src/hooks/scheduleUpdateHooks.ts","../src/hooks/teamFetchHooks.ts","../src/hooks/useAuth.ts","../src/Auth.ts"],"sourcesContent":["import { initializeApp } from '@firebase/app';\nimport { getFirestore, Firestore } from '@firebase/firestore';\nimport { getAuth, Auth } from '@firebase/auth';\n\nexport { FirebaseProvider, FirebaseContext } from './FirebaseProvider';\n\nconst firebaseConfig = {\n  /* cSpell:disable */\n  apiKey: 'AIzaSyC5MvMfEeebh3XxyzYSD3qWpFR0aAAXSHM',\n  authDomain: 'expo-bca-app.firebaseapp.com',\n  databaseURL: 'https://expo-bca-app-default-rtdb.firebaseio.com',\n  projectId: 'expo-bca-app',\n  storageBucket: 'expo-bca-app.appspot.com',\n  messagingSenderId: '248104656807',\n  appId: '1:248104656807:web:853cad16b8fa38dbee2082',\n  measurementId: 'G-EL12CDVSCR',\n};\n\nlet dbOut: Firestore;\nlet authOut: Auth;\n\nexport const init = () => {\n  const app = initializeApp(firebaseConfig);\n  dbOut = getFirestore(app);\n  authOut = getAuth(app);\n};\n\nexport * from './hooks/seasonUpdateHooks';\nexport * from './hooks/matchupFetchHooks';\nexport * from './hooks/playerFetchHooks';\nexport * from './hooks/scheduleUpdateHooks';\nexport * from './hooks/seasonFetchHooks';\nexport * from './hooks/seasonUpdateHooks';\nexport * from './hooks/teamFetchHooks';\n//export * from './hooks/teamToPlayerOperations';\n//export * from './hooks/teamUpdateHooks';\nexport { useAuth } from './hooks/useAuth';\nexport * from './Auth';\nexport * from './types';\nexport * from './constants/messages';\nexport { dbOut as db, authOut as auth };\n","import { createContext, PropsWithChildren, useEffect, useState } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { Firestore, getFirestore } from 'firebase/firestore';\nimport { Auth, getAuth } from 'firebase/auth';\n\ntype FirebaseContextParams = {\n  db: Firestore | null;\n  auth: Auth | null;\n};\n\ntype FirebaseProviderProps = {\n  credentials: Object;\n};\n\nexport const FirebaseContext = createContext<FirebaseContextParams>({\n  db: null,\n  auth: null,\n});\n\nexport const FirebaseProvider = ({\n  children,\n  credentials,\n}: PropsWithChildren<FirebaseProviderProps>) => {\n  const [initialized, setInitialized] = useState(false);\n  const [db, setDb] = useState<Firestore | null>(null);\n  const [auth, setAuth] = useState<Auth | null>(null);\n\n  useEffect(() => {\n    const app = initializeApp(credentials);\n    const db = getFirestore(app);\n    const auth = getAuth(app);\n    if (db !== null && auth !== null) {\n      setDb(db);\n      setAuth(auth);\n      setInitialized(true);\n    }\n    //make sure db and auth are not null and are of type Firestore and Auth\n    //set an initialized flag\n  }, [credentials]);\n  return (\n    <FirebaseContext.Provider value={{ db, auth }}>\n      {initialized && <>{children}</>}\n    </FirebaseContext.Provider>\n  );\n};\n","// ------------------------------\n// TABLE OF CONTENTS\n// ------------------------------\n// 1. Hooks\n//    - useAddOrUpdateSeason\n// 2. FireBaseFunctions\n//    - addOrUpdateSeasonRQ\n\n//------------------------\n// IMPORTS\n//------------------------\n\n// react query\nimport { useMutation } from 'react-query';\nimport { fetchSeasonRQ } from './seasonFetchHooks';\n\n// firebase\nimport { db } from '../';\nimport { updateDoc, doc, setDoc } from 'firebase/firestore';\n\n// types\nimport { Season } from '../types/seasonTypes';\nimport { SeasonName } from '../types/sharedTypes';\n\n// ------------------------------\n// 1. HOOKS\n// ------------------------------\n\nexport const useAddSeason = () => {\n  const mutation = useMutation(addSeasonRQ);\n\n  const addSeason = async (seasonName: string, seasonData: Season) => {\n    mutation.mutate({ seasonName, seasonData });\n  };\n\n  return { addSeason, ...mutation };\n};\n\nexport const useUpdateSeason = () => {\n  return useMutation(updateSeasonRQ);\n};\n\n// ------------------------------\n// 2. FIREBASE FUNCTIONS\n// ------------------------------\n\n/**\n * Adds a new season document to Firestore.\n *\n * @param seasonName - The name of the season to add.\n * @param seasonData - The season data object to add.\n */\nexport const addSeasonRQ = async ({\n  seasonName,\n  seasonData,\n}: {\n  seasonName: SeasonName;\n  seasonData: Season;\n}) => {\n  const seasonRef = doc(db, 'seasons', seasonName);\n  await setDoc(seasonRef, { ...seasonData, seasonCompleted: false });\n};\n\n/**\n * Updates an existing season document in Firestore.\n *\n * @param seasonName - The name of the season to update.\n * @param seasonData - The partial season data to update.\n */\nexport const updateSeasonRQ = async ({\n  seasonName,\n  seasonData,\n}: {\n  seasonName: SeasonName;\n  seasonData: Partial<Season>;\n}) => {\n  const seasonRef = doc(db, 'seasons', seasonName);\n  await updateDoc(seasonRef, seasonData);\n};\n\nconst checkSeasonExists = async (seasonName: SeasonName): Promise<boolean> => {\n  try {\n    const season = await fetchSeasonRQ(seasonName);\n    return Boolean(season);\n  } catch (error) {\n    return false;\n  }\n};\n","// ------------------------------\n// TABLE OF CONTENTS\n// ------------------------------\n// 1. Hooks\n//    - useFetchSeasons\n//    - useFetchSeason\n// 2. FireBaseFunctions\n//    - fetchSeasonsRQ\n//    - fetchSeasonRQ\n\n//------------------------\n// IMPORTS\n//------------------------\n\n// react query\nimport { useQuery, useQueryClient } from 'react-query';\n\n// firebase\nimport { db } from '../';\nimport {\n  collection,\n  query,\n  where,\n  getDocs,\n  doc,\n  getDoc,\n} from 'firebase/firestore';\n\n// types\nimport { Season } from '../types/seasonTypes';\nimport { SeasonName } from '../types/sharedTypes';\n\n// ------------------------------\n// 1. HOOKS\n// ------------------------------\n\nexport const useFetchSeasons = () => {\n  const queryClient = useQueryClient();\n\n  const refetchSeasons = () => {\n    queryClient.invalidateQueries('seasons');\n  };\n  return { ...useQuery('currentSeasons', fetchSeasonsRQ), refetchSeasons };\n};\n\nexport const useFetchSeason = (seasonName: string) => {\n  return useQuery(['season', seasonName], () => fetchSeasonRQ(seasonName));\n};\n\n// ------------------------------\n// 2. FIREBASE FUNCTIONS\n// ------------------------------\n\n/**\n * Fetches ALL seasons from Firestore where seasonCompleted = false.\n *\n * Queries seasons collection filtered by seasonCompleted field.\n * Maps results to Season objects by extracting id and data.\n *\n * Returns Promise resolving to array of Season objects.\n */\n\nconst fetchSeasonsRQ = async (): Promise<Season[]> => {\n  const seasonQuery = query(\n    collection(db, 'seasons'),\n    where('seasonCompleted', '==', false)\n  );\n  const querySnapshot = await getDocs(seasonQuery);\n\n  const seasonsArray = querySnapshot.docs.map((doc) => {\n    const season = doc.data();\n    season.id = doc.id;\n    return season as Season;\n  });\n\n  return seasonsArray;\n};\n\n/**\n * Fetches a SINGLE season by name/id from Firestore.\n *\n * Takes a season name/id string.\n * Gets the season document reference by name.\n * Fetches the season document snapshot.\n * If found, returns a Season object from the snapshot data.\n * If not found, throws an error.\n */\n\nexport const fetchSeasonRQ = async (\n  seasonName: SeasonName | undefined\n): Promise<Season> => {\n  if (seasonName === undefined) {\n    throw new Error('Season name/id not provided');\n  }\n  const seasonDoc = doc(db, 'seasons', seasonName);\n  const seasonDocSnapshot = await getDoc(seasonDoc);\n  if (seasonDocSnapshot.exists()) {\n    const season = seasonDocSnapshot.data();\n    season.id = seasonDocSnapshot.id;\n    return season as Season;\n  } else {\n    throw new Error('Season not found');\n  }\n};\n","// ------------------------------\n// TABLE OF CONTENTS\n// ------------------------------\n// 1. Hooks\n//    - useFetchRoundRobin\n//    - useFetchFinishedRoundRobin\n// 2. FireBaseFunctions\n//    - fetchRoundRobinRQ\n//    - fetchFinishedRoundRobinRQ\n\n//------------------------\n// IMPORTS\n//------------------------\n\n// react query\nimport { useQuery } from 'react-query';\n\n// firebase\nimport { Firestore, doc, getDoc } from 'firebase/firestore';\n\n// types\nimport { SeasonName } from '../types/sharedTypes';\n\nimport {\n  RoundRobinSchedule,\n  RoundRobinScheduleFinished,\n} from '../types/matchupTypes';\nimport { notFound } from '../constants/messages';\nimport { useContext } from 'react';\nimport { FirebaseContext } from '../FirebaseProvider';\n\n// ------------------------------\n// 1. HOOKS\n// ------------------------------\n\nexport const useFetchRoundRobin = (numberOfTeams: number | undefined) => {\n  const { db } = useContext(FirebaseContext);\n  return useQuery(\n    ['roundRobin', numberOfTeams],\n    () => fetchRoundRobinRQ(db!, numberOfTeams),\n    { enabled: !!numberOfTeams }\n  );\n};\n\nexport const useFetchFinishedRoundRobin = (\n  seasonName: SeasonName | undefined\n) => {\n  const { db } = useContext(FirebaseContext);\n  return useQuery(\n    ['roundRobinFinished', seasonName],\n    () => fetchFinishedRoundRobinRQ(db!, seasonName),\n    { enabled: !!seasonName }\n  );\n};\n\n// ------------------------------\n// 2. FIREBASE FUNCTIONS\n// ------------------------------\n\n/**\n * Adjusts the number of teams to be valid for generating a round robin schedule.\n *\n * - Ensures number of teams is even by adding 1 if odd.\n * - Sets number to minimum of 4 teams.\n * - Throws error if more than 48 teams.\n *\n * @param numberOfTeams - Original number of teams\n * @returns Adjusted number of teams valid for round robin schedule.\n */\nconst adjustNumberOfTeams = (numberOfTeams: number) => {\n  let adjustedNumber = numberOfTeams;\n  if (numberOfTeams % 2 !== 0) {\n    adjustedNumber += 1;\n  }\n  if (numberOfTeams < 4) {\n    adjustedNumber = 4;\n  }\n  if (numberOfTeams > 48) {\n    throw new Error(\n      'Round Robin Schedule for more than 48 teams not supported'\n    );\n  }\n  return adjustedNumber;\n};\n\n/**\n * Fetches a round robin schedule from Firestore for the given number of teams.\n *\n * Adjusts the number of teams to be valid for round robin generation.\n * Looks up the schedule by the adjusted team name in Firestore.\n * Returns the schedule if found, else throws an error.\n */\nconst fetchRoundRobinRQ = async (\n  db: Firestore,\n  numberOfTeams: number | undefined\n): Promise<RoundRobinSchedule | null> => {\n  if (numberOfTeams === undefined) {\n    throw new Error('Number of teams not provided');\n  }\n  const adjustedTeams = adjustNumberOfTeams(numberOfTeams);\n  const scheduleName = `scheduleFor${adjustedTeams}Teams`;\n  const scheduleRef = doc(db, 'roundRobinSchedules', scheduleName);\n  const scheduleDoc = await getDoc(scheduleRef);\n  if (scheduleDoc.exists()) {\n    return scheduleDoc.data() as RoundRobinSchedule;\n  } else {\n    throw new Error(\n      `Round Robin Schedule for ${adjustedTeams} teams ${notFound}`\n    );\n  }\n};\n\n/**\n * Fetches a finished round robin schedule from Firestore for the given season ID.\n *\n * Looks up the schedule by season ID in the 'finishedRoundRobinSchedules' collection.\n * Returns the schedule if found, else throws an error.\n */\nconst fetchFinishedRoundRobinRQ = async (\n  db: Firestore,\n  seasonId: SeasonName | undefined\n): Promise<RoundRobinScheduleFinished | null> => {\n  if (seasonId === undefined) {\n    throw new Error('Season ID not provided');\n  }\n  const scheduleRef = doc(db, 'finishedRoundRobinSchedules', seasonId);\n  const scheduleDoc = await getDoc(scheduleRef);\n  if (scheduleDoc.exists()) {\n    return scheduleDoc.data() as RoundRobinScheduleFinished;\n  } else {\n    throw new Error(\n      `Finished Round Robin Schedule for ${seasonId} ${notFound}`\n    );\n  }\n};\n","// common texts for failed and successful requests.\nexport const failedFetch = 'Failed to fetch ';\nexport const failedUpdate = 'Failed to update ';\nexport const failedCreate = 'Failed to create ';\nexport const tryAgain = 'Please try again. ';\nexport const createSuccess = ' created successfully! ';\nexport const updateSuccess = ' successfully updated!';\nexport const notFound = ' not found in Firestore.';\nexport const deleteSuccess = 'Successfully removed ';\nexport const deleteFailed = 'Failed to remove ';\nexport const fromStore = ' from Firestore.';\nexport const toStore = ' to Firestore.';\n","// ------------------------------\n// TABLE OF CONTENTS\n// ------------------------------\n// 1. Hooks\n//    - useFetchPastPlayerById\n//    - useFetchPlayerById\n//    - useFetchAllPastPlayers\n//    - useFetchAllPlayers\n// 2. FireBaseFunctions\n//    - fetchPastPlayerByIdRQ\n//    - fetchCurrentUserById\n//    - fetchAllPastPlayersRQ\n//    - fetchAllCurrentUsers\n\n//------------------------\n// IMPORTS\n//------------------------\nimport { useQuery } from 'react-query';\nimport {\n  Firestore,\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n} from 'firebase/firestore';\nimport { Email } from '../types/sharedTypes';\nimport { PastPlayer, Player } from '../types/userTypes';\nimport { useContext } from 'react';\nimport { FirebaseContext } from '../FirebaseProvider';\n\n// ------------------------------\n// 1. HOOKS\n// ------------------------------\n\nexport const useFetchPastPlayerById = (email: Email | undefined) => {\n  const { db } = useContext(FirebaseContext);\n\n  return useQuery(\n    ['pastPlayer', email],\n    () => fetchPastPlayerById(db!, email),\n    {\n      enabled: !!email,\n    }\n  );\n};\n\nexport const useFetchAllPastPlayers = () => {\n  const { db } = useContext(FirebaseContext);\n\n  return useQuery('pastPlayers', () => fetchAllPastPlayers(db!));\n};\n\nexport const useFetchPlayerById = (id: string | undefined) => {\n  const { db } = useContext(FirebaseContext);\n  return useQuery(['player', id], () => fetchPlayerById(db!, id), {\n    enabled: !!id,\n  });\n};\n\nexport const useFetchAllPlayers = () => {\n  const { db } = useContext(FirebaseContext);\n  return useQuery('Players', () => fetchAllPlayers(db!));\n};\n\n// ------------------------------\n// 2. FIREBASE FUNCTIONS\n// ------------------------------\n\n/**\n * Fetches a PastPlayer object by ID from Firestore.\n *\n * @param playerId - The ID of the past player to fetch.\n * @returns A Promise resolving to the PastPlayer object if found, or null if not found.\n * @throws Error if ID is not provided.\n */\nexport const fetchPastPlayerById = async (\n  db: Firestore,\n  email: Email | undefined\n): Promise<PastPlayer | null> => {\n  if (email === undefined) {\n    throw new Error('Player ID not provided');\n  }\n  const playerDoc = doc(db!, 'pastPlayers', email);\n  const playerDocSnapshot = await getDoc(playerDoc);\n  if (playerDocSnapshot.exists()) {\n    return {\n      id: playerDocSnapshot.id as Email,\n      ...(playerDocSnapshot.data() as Omit<PastPlayer, 'id'>),\n    };\n  } else {\n    throw new Error('Player not found');\n  }\n};\n\n/**\n * Fetches all PastPlayer objects from Firestore.\n *\n * @returns Promise resolving to an array of all PastPlayer objects.\n */\nconst fetchAllPastPlayers = async (db: Firestore): Promise<PastPlayer[]> => {\n  const querySnapshot = await getDocs(collection(db!, 'pastPlayers'));\n  const playersData: PastPlayer[] = [];\n\n  querySnapshot.forEach((doc) => {\n    const playerData = doc.data() as PastPlayer;\n    playersData.push({\n      ...playerData,\n      id: doc.id as Email,\n    });\n  });\n\n  return playersData;\n};\n\n/**\n * Fetches a Player object by ID from Firestore.\n *\n * @param id - The ID of the user to fetch.\n * @returns A Promise resolving to the Player object if found, or null if not found.\n * @throws Error if ID is not provided.\n */\nexport const fetchPlayerById = async (\n  db: Firestore,\n  id: string | undefined\n): Promise<Player | null> => {\n  if (id === undefined) {\n    throw new Error('Player ID not provided');\n  }\n  const userDoc = doc(db!, 'players', id as string);\n  const userDocSnapshot = await getDoc(userDoc);\n\n  if (userDocSnapshot.exists()) {\n    return {\n      id: userDocSnapshot.id,\n      ...(userDocSnapshot.data() as Omit<Player, 'id'>),\n    };\n  } else {\n    throw new Error('Player not found');\n  }\n};\n\n/**\n * Fetches all PastPlayer objects from Firestore.\n *\n * @returns Promise resolving to an array of all PastPlayer objects.\n */\nconst fetchAllPlayers = async (db: Firestore): Promise<Player[]> => {\n  const querySnapshot = await getDocs(collection(db!, 'players'));\n  const playersData: Player[] = [];\n\n  querySnapshot.forEach((doc) => {\n    const playerData = doc.data() as Player;\n    playersData.push({\n      ...playerData,\n      id: doc.id,\n    });\n  });\n\n  return playersData;\n};\n","// ------------------------------\n// TABLE OF CONTENTS\n// ------------------------------\n// 1. Hooks\n//    - useUpdateSeasonSchedule\n// 2. FireBaseFunctions\n//    - updateSeasonScheduleRQ\n\n//------------------------\n// IMPORTS\n//------------------------\n\n// react-query\nimport { useMutation } from 'react-query';\n\n// firebase\nimport { db } from '../';\nimport { updateDoc, doc } from 'firebase/firestore';\n\n//types\nimport { Schedule } from '../types/seasonTypes';\nimport { SeasonName } from '../types/sharedTypes';\n\n// ------------------------------\n// 1. HOOKS\n// ------------------------------\n\nexport const useUpdateSeasonSchedule = () => {\n  return useMutation(updateSeasonScheduleRQ);\n};\n\n// ------------------------------\n// 2. FIREBASE FUNCTIONS\n// ------------------------------\n/**\n * Updates the schedule for the given season in Firestore.\n *\n * @param seasonName - The name of the season document to update.\n * @param schedule - The updated schedule object to save.\n */\n\nexport const updateSeasonScheduleRQ = async ({\n  seasonName,\n  schedule,\n}: {\n  seasonName: SeasonName;\n  schedule: Schedule;\n}) => {\n  //reference to the season document\n  const seasonRef = doc(db, 'seasons', seasonName);\n  await updateDoc(seasonRef, {\n    schedule: schedule,\n  });\n};\n","// ------------------------------\n// TABLE OF CONTENTS\n// ------------------------------\n// 1. Hooks\n//    - useFetchTeamById\n//    - useFetchTeamsFromSeason\n// 2. FireBaseFunctions\n//    - fetchTeamByIdRQ\n//    - fetchTeamsFromSeasonRQ\n\n//------------------------\n// IMPORTS\n//------------------------\n\n// react query\nimport { useQuery } from 'react-query';\nimport { fetchSeasonRQ } from './seasonFetchHooks';\n\n// firebase\nimport { db } from '../';\nimport { doc, getDoc } from 'firebase/firestore';\n\n// types\nimport { SeasonName } from '../types/sharedTypes';\nimport { Team } from '../types/teamTypes';\n\n// ------------------------------\n// 1. HOOKS\n// ------------------------------\n\nexport const useFetchTeamById = (teamId: string | undefined) => {\n  return useQuery(['team', teamId], () => fetchTeamByIdRQ(teamId), {\n    enabled: teamId !== undefined,\n  });\n};\n\nexport const useFetchTeamsFromSeason = (seasonName: SeasonName | undefined) => {\n  const query = useQuery<Team[], unknown>(\n    ['teamsFromSeason', seasonName],\n    () => fetchTeamsFromSeasonRQ(seasonName),\n    {\n      enabled: !!seasonName,\n    }\n  );\n  return query;\n};\n\n// ------------------------------\n// 2. FIREBASE FUNCTIONS\n// ------------------------------\n\n/**\n * Fetches a team by ID from Firestore.\n *\n * Takes a team ID string.\n * Gets the team document reference by ID.\n * Fetches the team document snapshot.\n * If found, returns a Team object from the snapshot data.\n * If not found, throws an error.\n */\n\nexport const fetchTeamByIdRQ = async (\n  teamId: string | undefined\n): Promise<Team | null> => {\n  if (teamId === undefined) {\n    throw new Error('Team ID not provided');\n  }\n  const teamDoc = doc(db, 'teams', teamId);\n  const teamDocSnapshot = await getDoc(teamDoc);\n  if (teamDocSnapshot.exists()) {\n    const teamData = teamDocSnapshot.data() as Team;\n    teamData.id = teamDocSnapshot.id;\n    return teamData;\n  } else {\n    throw new Error('Team not found');\n  }\n};\n\n/**\n * Fetches all teams for a given season from Firestore.\n *\n * Takes a season name/id string.\n * Gets the season document.\n * Maps over the season's team IDs to fetch each team document.\n * Awaits all team fetch promises.\n * Filters out any null teams.\n * Returns the array of Team objects.\n */\n\nconst fetchTeamsFromSeasonRQ = async (\n  seasonName: SeasonName | undefined\n): Promise<Team[]> => {\n  const seasonDoc = await fetchSeasonRQ(seasonName);\n  if (!seasonDoc.teams || seasonDoc.teams.length === 0) {\n    return [];\n  }\n  const teamsPromises = seasonDoc.teams.map(async (teamId) =>\n    fetchTeamByIdRQ(teamId)\n  );\n  const teams = await Promise.all(teamsPromises);\n  return teams.filter((team) => team !== null) as Team[];\n};\n","import { useState, useEffect, useContext } from 'react';\nimport { User, onAuthStateChanged } from 'firebase/auth';\nimport { FirebaseContext } from '../';\n\nexport const useAuth = (): { user: User | null } => {\n  const { auth } = useContext(FirebaseContext)\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if(!auth) {\n      return;\n    }\n    return onAuthStateChanged(auth, (currentUser) => {\n      setUser(currentUser);\n    });\n  }, [auth]);\n\n  return { user };\n};\n","import {\n  createUserWithEmailAndPassword,\n  sendEmailVerification,\n  signInWithEmailAndPassword,\n  sendPasswordResetEmail,\n  signOut,\n  onAuthStateChanged,\n  User,\n} from 'firebase/auth';\nimport { auth } from './';\nimport {Email} from './types/sharedTypes';\n\n/**\n * INDEX TABLE OF CONTENTS\n * 1. Enums\n * 2. User functions\n * 3. Password functions\n * 4. Email Functions\n * 5. Session Management Functions\n */\n\n// =======================================\n// 1. Enums\n// =======================================\n\n/**\n * @typedef {Object} MODES\n * @property {'login'} LOGIN - Represents the login page\n * @property {'register'} REGISTER - Represents the registration page\n * @property {'resetPassword'} RESET_PASSWORD - Represents the reset password page\n */\n\nexport const LOGIN_MODES = {\n  LOGIN: 'login',\n  REGISTER: 'register',\n  RESET_PASSWORD: 'resetPassword',\n};\n\n// =======================================\n// 2. User Functions\n// =======================================\n\n/** Register a user\n * @param {string} email users email\n * @param {string} password users password\n * @returns {object} User response object\n * @throws {Error} Throws an error if registration fails\n */\n\nexport const registerUser = async (email: Email, password: string) => {\n  try {\n    const response = await createUserWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    return response.user;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/** Log in a user\n * @param {string} email users email\n * @param {string} password users password\n * @returns {object} User response object\n * @throws {Error} Throws an error if login fails\n */\n\nexport const loginUser = async (email: Email, password: string) => {\n  try {\n    const response = await signInWithEmailAndPassword(auth, email, password);\n    return response.user;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/** Get current user\n * @returns {object} User response object\n */\n\nexport const getCurrentUser = () => auth.currentUser;\n\n// =======================================\n// 3. Password Functions\n// =======================================\n\n/** Sends a password email to the provided email address\n * @param {string} email users email\n * @returns {undefined}\n * @throws {Error} Throws an error if sending reset password email fails\n */\n\nexport const resetPassword = async (email: Email) => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    alert('Reset Password sent to your Email');\n  } catch (error) {\n    console.error('Error sending reset password email', error);\n    throw error;\n  }\n};\n\n// =======================================\n// 4. Email Functions\n// =======================================\n\n/** Sends verification email\n * @param {object} user Firebase user object\n * @returns {undefined}\n * @throws {Error} Throws an error if sending reset password email fails\n */\n\nexport const sendVerificationEmail = async (user: User) => {\n  try {\n    await sendEmailVerification(user);\n    console.log('Verification email sent.');\n  } catch (error) {\n    console.error('Error sending verification email:', error);\n    throw error;\n  }\n};\n\n// =======================================\n// 5. Session Management Functions\n// =======================================\n\n/** Logs out the current user\n * @returns {undefined}\n * @throws {Error} Throws and error if logout fails\n */\n\nexport const logoutUser = async () => {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error('Error signing out:', error);\n    throw error;\n  }\n};\n\n/** Subscribe to authentication state changes\n * @param {function} callback Callback function to handle auth state changes\n * @returns {function} Unsubscribe function\n */\n\nexport const observeAuthState = (callback: any) => {\n  return onAuthStateChanged(auth, callback);\n};\n"],"mappings":"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","names":["initializeApp","getFirestore","getAuth","db","auth","doc","doc","doc","useQuery","doc","getDoc","useQuery","doc","getDoc","useQuery","collection","doc","getDoc","getDocs","useContext","useContext","useQuery","doc","getDoc","getDocs","collection","useMutation","updateDoc","doc","useMutation","doc","updateDoc","useQuery","doc","getDoc","useQuery","query","doc","getDoc","useState","useEffect","useContext","useContext","useState","useEffect","onAuthStateChanged","onAuthStateChanged","initializeApp","getFirestore","getAuth"]}